OLIVA MODEL AI
├── app.py                   # Flask webhook (Telegram / Twilio)
├── system_prompt.txt        # Prompt maestro (Markdown)
├── .env                     # Credenciales y settings
│
├── db/
│   ├── models.py            # SQLAlchemy ORM / DDL
│   └── engine.py            # create_engine() ya configurado
│
├── core/
│   ├── functions.py         # handlers de negocio (agenda, pagos…)
│   ├── memory.py            # LangChain + Chroma
│   ├── customers.py         # CRUD clientes (usa engine.py)
│   ├── scheduler.py         # disponibilidad + citas (usa engine.py)
│   └── embeddings.py        # FAISS + OpenAI embeddings
│
└── utils/
    ├── gcalendar.py         # Google Calendar wrapper
    └── helpers_tg.py        # send(), tg(), generación de teclados



# Segunda estructura
OLIVA MODEL AI/
├── app.py                   # Flask webhook (Telegram / Twilio)
├── system_prompt.txt        # Prompt maestro (Markdown)
├── .env                     # Credenciales y settings (OpenAI, Firebase, SQL Azure)
│
├── db/                      # Todo lo relacionado a la base relacional
│   ├── engine.py            # create_engine() con conexión a SQL Azure
│   ├── models.py            # SQLAlchemy ORM: clientes, citas, personal, reviews…
│   └── session.py           # factory de sesión (scoped_session)
│
├── firebase/                # Capa de chat-history en Firestore
│   ├── client.py            # inicializa Firebase Admin SDK
│   └── history.py           # funciones CRUD / query para “chat_history”
│
├── core/                    # Lógica de negocio independiente de infra
│   ├── functions.py         # handlers de alto nivel (lista servicios, create_booking…)
│   ├── customers.py         # CRUD de clientes (usa db/session.py)
│   ├── scheduler.py         # lógica de disponibilidad y consulta de citas (usa db)
│   └── embeddings.py        # FAISS + creación de vectores OpenAI
│
├── memory/                  # LangChain + retrieval sobre Firestore
│   ├── memory.py            # ConversationBufferMemory + FirestoreVectorStore
│   └── namespace.txt        # (opcional) mapeo de colecciones “chat_history”
|
|__ scripts/
|    |
|    |__ import_servicios.py # Extraccion de datos de archivo csv
|
│
└── utils/
    ├── gcalendar.py         # wrapper de Google Calendar
    ├── tg_helpers.py        # send_message(), build_keyboard(), parse_callback…
    └── datetime_parser.py   # dateparser + reglas de normalización


# Tercera estructura
OLIVA_MODEL_AI/
├── app/                               # capa HTTP / mensajería
│   ├── __init__.py                    # create_app() + registrar blueprints
│   ├── webhook.py                     # Flask route: Telegram / Twilio
│   ├── admin_agente.py                   # endpoint solo-dueña (comandos SQL)
│   └── keyboards.py                   # builders de inline / reply buttons
│
├── system_prompt.txt                  # prompt maestro de Oliva
├── .env                               # claves OpenAI, Azure SQL, Firebase…
│
│── data/
│   ├── servicios.csv            # servicios disponibles
│   ├── personal.csv             # personal disponible
│   ├── productos.csv            # productos disponibles
│
├── db/                                # SQL Azure
│   ├── engine.py                      # create_engine(pool_pre_ping=True,…)
│   ├── session.py                     # SessionLocal (scoped_session)
│   ├── models.py                      # Base, Cliente, Empleado, Disponibilidad_Personal, Servicio, Producto y Cita
│   ├── __init__.py                    # inicializa la base de datos
│   └── modificar tablas.py
│
├── firebase/
│   ├── client.py                      # Admin SDK inicial
│   └── history.py                     # CRUD “chat_history”
|   └── langchain_memory.py            # Memoria para LangChain (FirestoreChatHistory)
│
├── core/                              # lógica de negocio (no HTTP)
│   ├── functions.py                   # function-calling dispatch
│   ├── customers.py                   # CRUD + validaciones
│   ├── scheduler.py                   # reglas de agenda + disponibilidad
│   ├── embeddings.py                  # FAISS + OpenAI vectors
│   ├── admin_actions.py               # add_employee, mark_staff_unavailable…
|   └── message_predictor.py
│
├── memory/                            # LangChain
│   ├── __init__.py                    # inicializa FirestoreVectorStore
│   ├── memory.py                      # ConversationBufferMemory + Firestore
│   └── namespace.txt                  # (opcional) mapeo colección
│
├── utils/
│   ├── gcalendar.py                   # wrapper Google Calendar
│   ├── tg_helpers.py                  # send_message(), parse_callback()…
│   └── datetime_parser.py             # dateparser + reglas MX
│
├── scripts/                           # importaciones y utilidades CLI
│   ├── import_servicios.py            # carga CSV → servicios_oliva
│   ├── import_personal.py             # carga CSV → personal_oliva
│   ├── import_productos.py            # carga CSV → productos_oliva
│   ├── seed_db.py                     # crea tablas + datos demo
│   └── migrate.py                     # helpers Alembic opcionales
│
└── tests/                             # pytest (unit + integration)
    └── …
